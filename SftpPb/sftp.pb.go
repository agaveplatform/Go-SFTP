// Code generated by protoc-gen-go. DO NOT EDIT.
// source: SftpPb/sftp.proto

package sftppb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Sftp struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	PassWord             string   `protobuf:"bytes,2,opt,name=passWord,proto3" json:"passWord,omitempty"`
	SystemId             string   `protobuf:"bytes,3,opt,name=systemId,proto3" json:"systemId,omitempty"`
	HostKey              string   `protobuf:"bytes,4,opt,name=hostKey,proto3" json:"hostKey,omitempty"`
	FileName             string   `protobuf:"bytes,5,opt,name=fileName,proto3" json:"fileName,omitempty"`
	HostPort             string   `protobuf:"bytes,6,opt,name=hostPort,proto3" json:"hostPort,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Sftp) Reset()         { *m = Sftp{} }
func (m *Sftp) String() string { return proto.CompactTextString(m) }
func (*Sftp) ProtoMessage()    {}
func (*Sftp) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b70380debb315ef, []int{0}
}

func (m *Sftp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sftp.Unmarshal(m, b)
}
func (m *Sftp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sftp.Marshal(b, m, deterministic)
}
func (m *Sftp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sftp.Merge(m, src)
}
func (m *Sftp) XXX_Size() int {
	return xxx_messageInfo_Sftp.Size(m)
}
func (m *Sftp) XXX_DiscardUnknown() {
	xxx_messageInfo_Sftp.DiscardUnknown(m)
}

var xxx_messageInfo_Sftp proto.InternalMessageInfo

func (m *Sftp) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Sftp) GetPassWord() string {
	if m != nil {
		return m.PassWord
	}
	return ""
}

func (m *Sftp) GetSystemId() string {
	if m != nil {
		return m.SystemId
	}
	return ""
}

func (m *Sftp) GetHostKey() string {
	if m != nil {
		return m.HostKey
	}
	return ""
}

func (m *Sftp) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *Sftp) GetHostPort() string {
	if m != nil {
		return m.HostPort
	}
	return ""
}

type CopyLocalToRemoteRequest struct {
	Sftp                 *Sftp    `protobuf:"bytes,1,opt,name=sftp,proto3" json:"sftp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CopyLocalToRemoteRequest) Reset()         { *m = CopyLocalToRemoteRequest{} }
func (m *CopyLocalToRemoteRequest) String() string { return proto.CompactTextString(m) }
func (*CopyLocalToRemoteRequest) ProtoMessage()    {}
func (*CopyLocalToRemoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b70380debb315ef, []int{1}
}

func (m *CopyLocalToRemoteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CopyLocalToRemoteRequest.Unmarshal(m, b)
}
func (m *CopyLocalToRemoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CopyLocalToRemoteRequest.Marshal(b, m, deterministic)
}
func (m *CopyLocalToRemoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CopyLocalToRemoteRequest.Merge(m, src)
}
func (m *CopyLocalToRemoteRequest) XXX_Size() int {
	return xxx_messageInfo_CopyLocalToRemoteRequest.Size(m)
}
func (m *CopyLocalToRemoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CopyLocalToRemoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CopyLocalToRemoteRequest proto.InternalMessageInfo

func (m *CopyLocalToRemoteRequest) GetSftp() *Sftp {
	if m != nil {
		return m.Sftp
	}
	return nil
}

type CopyLocalToRemoteResponse struct {
	Result               string   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CopyLocalToRemoteResponse) Reset()         { *m = CopyLocalToRemoteResponse{} }
func (m *CopyLocalToRemoteResponse) String() string { return proto.CompactTextString(m) }
func (*CopyLocalToRemoteResponse) ProtoMessage()    {}
func (*CopyLocalToRemoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b70380debb315ef, []int{2}
}

func (m *CopyLocalToRemoteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CopyLocalToRemoteResponse.Unmarshal(m, b)
}
func (m *CopyLocalToRemoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CopyLocalToRemoteResponse.Marshal(b, m, deterministic)
}
func (m *CopyLocalToRemoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CopyLocalToRemoteResponse.Merge(m, src)
}
func (m *CopyLocalToRemoteResponse) XXX_Size() int {
	return xxx_messageInfo_CopyLocalToRemoteResponse.Size(m)
}
func (m *CopyLocalToRemoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CopyLocalToRemoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CopyLocalToRemoteResponse proto.InternalMessageInfo

func (m *CopyLocalToRemoteResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*Sftp)(nil), "sftp.Sftp")
	proto.RegisterType((*CopyLocalToRemoteRequest)(nil), "sftp.CopyLocalToRemoteRequest")
	proto.RegisterType((*CopyLocalToRemoteResponse)(nil), "sftp.CopyLocalToRemoteResponse")
}

func init() { proto.RegisterFile("SftpPb/sftp.proto", fileDescriptor_1b70380debb315ef) }

var fileDescriptor_1b70380debb315ef = []byte{
	// 258 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xa9, 0xc6, 0x58, 0xc7, 0x93, 0x7b, 0x90, 0xb5, 0x87, 0x2a, 0x3d, 0x79, 0xaa, 0xd0,
	0xde, 0x3c, 0x2a, 0x08, 0xa2, 0x48, 0x48, 0x0a, 0x82, 0x9e, 0x92, 0x74, 0x82, 0x85, 0xa4, 0xb3,
	0xee, 0x6c, 0x84, 0xbc, 0x93, 0x0f, 0x29, 0xb3, 0xdb, 0xf5, 0xd4, 0xde, 0xf6, 0xe3, 0x9b, 0xe1,
	0x9f, 0x9f, 0x85, 0x8b, 0xa2, 0x71, 0x26, 0xab, 0xee, 0xb8, 0x71, 0x66, 0x6e, 0x2c, 0x39, 0x52,
	0x89, 0xbc, 0x67, 0xbf, 0x23, 0x48, 0xc4, 0xa9, 0x09, 0x8c, 0x7b, 0x46, 0xbb, 0x2d, 0x3b, 0xd4,
	0xa3, 0x9b, 0xd1, 0xed, 0x59, 0xfe, 0xcf, 0xe2, 0x4c, 0xc9, 0xfc, 0x4e, 0x76, 0xad, 0x8f, 0x82,
	0x8b, 0x2c, 0x8e, 0x07, 0x76, 0xd8, 0x3d, 0xaf, 0xf5, 0x71, 0x70, 0x91, 0x95, 0x86, 0xd3, 0x2f,
	0x62, 0xf7, 0x82, 0x83, 0x4e, 0xbc, 0x8a, 0x28, 0x5b, 0xcd, 0xa6, 0xc5, 0x37, 0x49, 0x3b, 0x09,
	0x5b, 0x91, 0xc5, 0xc9, 0x58, 0x46, 0xd6, 0xe9, 0x34, 0xb8, 0xc8, 0xb3, 0x7b, 0xd0, 0x8f, 0x64,
	0x86, 0x57, 0xaa, 0xcb, 0x76, 0x45, 0x39, 0x76, 0xe4, 0x30, 0xc7, 0xef, 0x1e, 0xd9, 0xa9, 0x29,
	0xf8, 0x4a, 0xfe, 0xfa, 0xf3, 0x05, 0xcc, 0x7d, 0x57, 0xe9, 0x96, 0x87, 0xaa, 0x4b, 0xb8, 0xda,
	0xb3, 0xcb, 0x86, 0xb6, 0x8c, 0xea, 0x12, 0x52, 0x8b, 0xdc, 0xb7, 0x6e, 0x57, 0x7e, 0x47, 0x8b,
	0x1a, 0x92, 0xe2, 0x69, 0x95, 0xa9, 0xcf, 0x3d, 0xc1, 0x05, 0xda, 0x9f, 0x4d, 0x8d, 0x6a, 0x1a,
	0xa2, 0x0e, 0x1d, 0x36, 0xb9, 0x3e, 0xe8, 0x43, 0xf8, 0xc3, 0xf8, 0x23, 0x95, 0x09, 0x53, 0x55,
	0xa9, 0xff, 0x9b, 0xe5, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1e, 0xe0, 0x9c, 0xcb, 0xb0, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SFTPClient is the client API for SFTP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SFTPClient interface {
	CopyLocalToRemoteService(ctx context.Context, in *CopyLocalToRemoteRequest, opts ...grpc.CallOption) (*CopyLocalToRemoteResponse, error)
}

type sFTPClient struct {
	cc *grpc.ClientConn
}

func NewSFTPClient(cc *grpc.ClientConn) SFTPClient {
	return &sFTPClient{cc}
}

func (c *sFTPClient) CopyLocalToRemoteService(ctx context.Context, in *CopyLocalToRemoteRequest, opts ...grpc.CallOption) (*CopyLocalToRemoteResponse, error) {
	out := new(CopyLocalToRemoteResponse)
	err := c.cc.Invoke(ctx, "/sftp.SFTP/CopyLocalToRemoteService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SFTPServer is the server API for SFTP service.
type SFTPServer interface {
	CopyLocalToRemoteService(context.Context, *CopyLocalToRemoteRequest) (*CopyLocalToRemoteResponse, error)
}

// UnimplementedSFTPServer can be embedded to have forward compatible implementations.
type UnimplementedSFTPServer struct {
}

func (*UnimplementedSFTPServer) CopyLocalToRemoteService(ctx context.Context, req *CopyLocalToRemoteRequest) (*CopyLocalToRemoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyLocalToRemoteService not implemented")
}

func RegisterSFTPServer(s *grpc.Server, srv SFTPServer) {
	s.RegisterService(&_SFTP_serviceDesc, srv)
}

func _SFTP_CopyLocalToRemoteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyLocalToRemoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SFTPServer).CopyLocalToRemoteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sftp.SFTP/CopyLocalToRemoteService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SFTPServer).CopyLocalToRemoteService(ctx, req.(*CopyLocalToRemoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SFTP_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sftp.SFTP",
	HandlerType: (*SFTPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CopyLocalToRemoteService",
			Handler:    _SFTP_CopyLocalToRemoteService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "SftpPb/sftp.proto",
}
